/*//
 */

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
unsigned char x=0,y=0,z=0;
char s_x,s_y,x_n,y_n;    // was initially int
void send_ser(char);

void make_reference(char *,char *,char *);
int main(void)
{
    char r_x=0,r_y=0,r_z=0;
    DDRD=0;

    //TCCR2|=(1<<WGM20)|(1<<CS22)|(1<<CS20);
    //OCR2=125;
    //TIMSK|=(1<<OCIE2);


    //Serial Starts
    UCSRB= (1<<TXEN);
    UCSRC=0x01;//enable USART, 1 start 2 stop bit,9600 bauds
    UCSRC= (1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL)|(1<<USBS);
    UBRRL=0xa0;;
    //Serial ends
    //ADC starts_here
    ADMUX=0x60;
    ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE);
    ADMUX|=(1<<ADLAR)|(1<<REFS0);
    ADCSRA|=(1<<ADSC);
    //Adc ends

    //takeing reference starts
    while((ADCSRA&(1<<ADIF))==0) ;
    r_x=ADCH; //reference
    ADMUX|=(1<<MUX0);
    ADCSRA|=(1<<ADSC);
    while((ADCSRA&(1<<ADIF))==0) ;
    r_y=ADCH; //reference
    ADMUX++;
    ADCSRA|=(1<<ADSC);
    while((ADCSRA&(1<<ADIF))==0) ;
    r_z=ADCH; //reference
    ADMUX=0x60;
   // send_ser(r_z);
    sei();
    //_delay_ms(5000);
    //Taking reference ends

    ADCSRA|=(1<<ADSC); //start ADC

    while(1)
    {



        s_x=(x-(r_x));
        s_y=(y-(r_y));


        if(s_x<0)
        {
            s_x=-s_x;
            x_n=1;
        }

        if(s_y<0)
        {
            s_y=-s_y;
            x_n|=(1<<PIN1);
        }
        x_n=x_n|y_n;
        if((PIND&0x80)==0)
        {
            cli();
            r_x=x;
            r_y=y;
            r_z=z;
            sei();
        }
        if((PIND&0x08)==0)         //sw1
        {
            x_n|=(1<<PIN2);
        }
        if((PIND&0x04)==0)           //sw2
        {
            x_n|=(1<<PIN3);
        }
        s_x|=(1<<PIN7);
        //s_y|=(1<<PIN6);
        x_n|=(1<<PIN6);
        //send_ser('x');

        send_ser(s_x);

       // _delay_ms(1);
        send_ser(s_y);
        //_delay_ms(1);
        send_ser(x_n);
        //_delay_ms(1);
        x_n=y_n=0;

        //send_ser('b');
    }


    return 0;
}
ISR(ADC_vect)
{

    switch(ADMUX)
    {
        case 0x60:x=ADCH;
        //send_ser(x);
        break;
        case 0x61:y=ADCH;
        //send_ser(y);
        break;
        case 0x62:z=ADCH;
        //send_ser(z);
        break;
    }
    ADMUX++;
    if(ADMUX>0x62)
    {
        ADMUX=0x60;
    }
    ADCSRA|=(1<<ADSC);

}

void send_ser(char data)
{
    while(!(UCSRA&(1<<UDRE)));
    UDR=data;
}
/*void make_reference(char *rx,char *ry,char *rz)
{
    send_ser(x);
    send_ser(y);
    send_ser(z);
    *rx=x;
    *ry=y;
    *rz=z;
}*/
/*ISR(TIMER2_COMP_vect)
{

        send_ser('x');
        _delay_ms(10);
        send_ser(*s_x);
        send_ser(*s_y);
        send_ser(*x_n);
        x_n=y_n=0;
}*/

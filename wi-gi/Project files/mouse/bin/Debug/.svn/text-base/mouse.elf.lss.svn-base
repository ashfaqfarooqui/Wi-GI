
bin/Debug/mouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  00000452  2**0
                  ALLOC
  2 .stab         00000eb8  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000758  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	69 c1       	rjmp	.+722    	; 0x2f0 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 36       	cpi	r26, 0x68	; 104
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	ca c1       	rjmp	.+916    	; 0x3da <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
*/
void send_ser(char);


int main(void)
{
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x6>
  4e:	0f 92       	push	r0
  50:	cd b7       	in	r28, 0x3d	; 61
  52:	de b7       	in	r29, 0x3e	; 62
    char r_x=0,r_y=0,r_z=0;
  54:	19 82       	std	Y+1, r1	; 0x01
  56:	1a 82       	std	Y+2, r1	; 0x02
  58:	1b 82       	std	Y+3, r1	; 0x03
    DDRD=0;
  5a:	81 e3       	ldi	r24, 0x31	; 49
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	fc 01       	movw	r30, r24
  60:	10 82       	st	Z, r1



    //Serial Starts
    UCSRB= (1<<TXEN);
  62:	8a e2       	ldi	r24, 0x2A	; 42
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	28 e0       	ldi	r18, 0x08	; 8
  68:	fc 01       	movw	r30, r24
  6a:	20 83       	st	Z, r18
    UCSRC=0x01;//enable USART, 1 start 2 stop bit,2400 bauds
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	21 e0       	ldi	r18, 0x01	; 1
  72:	fc 01       	movw	r30, r24
  74:	20 83       	st	Z, r18
    UCSRC= (1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL)|(1<<USBS);
  76:	80 e4       	ldi	r24, 0x40	; 64
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	2e e8       	ldi	r18, 0x8E	; 142
  7c:	fc 01       	movw	r30, r24
  7e:	20 83       	st	Z, r18
    UBRRL=0xa0;
  80:	89 e2       	ldi	r24, 0x29	; 41
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	20 ea       	ldi	r18, 0xA0	; 160
  86:	fc 01       	movw	r30, r24
  88:	20 83       	st	Z, r18
    //Serial ends

    //ADC starts_here
    ADMUX=0x60;
  8a:	87 e2       	ldi	r24, 0x27	; 39
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	20 e6       	ldi	r18, 0x60	; 96
  90:	fc 01       	movw	r30, r24
  92:	20 83       	st	Z, r18
    ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE);
  94:	86 e2       	ldi	r24, 0x26	; 38
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	26 e2       	ldi	r18, 0x26	; 38
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	f9 01       	movw	r30, r18
  9e:	20 81       	ld	r18, Z
  a0:	2f 68       	ori	r18, 0x8F	; 143
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
    ADMUX|=(1<<ADLAR);
  a6:	87 e2       	ldi	r24, 0x27	; 39
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	27 e2       	ldi	r18, 0x27	; 39
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	f9 01       	movw	r30, r18
  b0:	20 81       	ld	r18, Z
  b2:	20 62       	ori	r18, 0x20	; 32
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
    ADCSRA|=(1<<ADSC);
  b8:	86 e2       	ldi	r24, 0x26	; 38
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	26 e2       	ldi	r18, 0x26	; 38
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	f9 01       	movw	r30, r18
  c2:	20 81       	ld	r18, Z
  c4:	20 64       	ori	r18, 0x40	; 64
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
    //Adc ends

    //takeing reference starts
    while((ADCSRA&(1<<ADIF))==0) ;
  ca:	00 00       	nop
  cc:	86 e2       	ldi	r24, 0x26	; 38
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	fc 01       	movw	r30, r24
  d2:	80 81       	ld	r24, Z
  d4:	88 2f       	mov	r24, r24
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	80 71       	andi	r24, 0x10	; 16
  da:	90 70       	andi	r25, 0x00	; 0
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	b1 f3       	breq	.-20     	; 0xcc <main+0x84>
    r_x=ADCH; //reference
  e0:	85 e2       	ldi	r24, 0x25	; 37
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	80 81       	ld	r24, Z
  e8:	89 83       	std	Y+1, r24	; 0x01
    ADMUX|=(1<<MUX0);
  ea:	87 e2       	ldi	r24, 0x27	; 39
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	27 e2       	ldi	r18, 0x27	; 39
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	21 60       	ori	r18, 0x01	; 1
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
    ADCSRA|=(1<<ADSC);
  fc:	86 e2       	ldi	r24, 0x26	; 38
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	26 e2       	ldi	r18, 0x26	; 38
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	20 81       	ld	r18, Z
 108:	20 64       	ori	r18, 0x40	; 64
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
    while((ADCSRA&(1<<ADIF))==0) ;
 10e:	00 00       	nop
 110:	86 e2       	ldi	r24, 0x26	; 38
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	88 2f       	mov	r24, r24
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	80 71       	andi	r24, 0x10	; 16
 11e:	90 70       	andi	r25, 0x00	; 0
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	b1 f3       	breq	.-20     	; 0x110 <main+0xc8>
    r_y=ADCH; //reference
 124:	85 e2       	ldi	r24, 0x25	; 37
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	fc 01       	movw	r30, r24
 12a:	80 81       	ld	r24, Z
 12c:	8a 83       	std	Y+2, r24	; 0x02
    ADMUX++;
 12e:	87 e2       	ldi	r24, 0x27	; 39
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	20 81       	ld	r18, Z
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
    ADCSRA|=(1<<ADSC);
 13c:	86 e2       	ldi	r24, 0x26	; 38
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	26 e2       	ldi	r18, 0x26	; 38
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	20 81       	ld	r18, Z
 148:	20 64       	ori	r18, 0x40	; 64
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
    while((ADCSRA&(1<<ADIF))==0) ;
 14e:	00 00       	nop
 150:	86 e2       	ldi	r24, 0x26	; 38
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	fc 01       	movw	r30, r24
 156:	80 81       	ld	r24, Z
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	80 71       	andi	r24, 0x10	; 16
 15e:	90 70       	andi	r25, 0x00	; 0
 160:	00 97       	sbiw	r24, 0x00	; 0
 162:	b1 f3       	breq	.-20     	; 0x150 <main+0x108>
    r_z=ADCH; //reference
 164:	85 e2       	ldi	r24, 0x25	; 37
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	80 81       	ld	r24, Z
 16c:	8b 83       	std	Y+3, r24	; 0x03
    ADMUX=0x60;
 16e:	87 e2       	ldi	r24, 0x27	; 39
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	20 e6       	ldi	r18, 0x60	; 96
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18

    sei();
 178:	78 94       	sei

    //Taking reference ends

    ADCSRA|=(1<<ADSC); //start ADC
 17a:	86 e2       	ldi	r24, 0x26	; 38
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	26 e2       	ldi	r18, 0x26	; 38
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	f9 01       	movw	r30, r18
 184:	20 81       	ld	r18, Z
 186:	20 64       	ori	r18, 0x40	; 64
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
    while(1)
    {



        s_x=(x-(r_x));
 18c:	90 91 60 00 	lds	r25, 0x0060
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	f9 2f       	mov	r31, r25
 194:	f8 1b       	sub	r31, r24
 196:	8f 2f       	mov	r24, r31
 198:	80 93 66 00 	sts	0x0066, r24
        s_y=(y-(r_y));
 19c:	90 91 61 00 	lds	r25, 0x0061
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
 1a2:	29 2f       	mov	r18, r25
 1a4:	28 1b       	sub	r18, r24
 1a6:	82 2f       	mov	r24, r18
 1a8:	80 93 67 00 	sts	0x0067, r24
        s_z=((r_z)-z);
 1ac:	9b 81       	ldd	r25, Y+3	; 0x03
 1ae:	80 91 62 00 	lds	r24, 0x0062
 1b2:	e9 2f       	mov	r30, r25
 1b4:	e8 1b       	sub	r30, r24
 1b6:	8e 2f       	mov	r24, r30
 1b8:	80 93 65 00 	sts	0x0065, r24
        //set sign bits
        if(s_x<0)
 1bc:	80 91 66 00 	lds	r24, 0x0066
 1c0:	88 23       	and	r24, r24
 1c2:	44 f4       	brge	.+16     	; 0x1d4 <main+0x18c>
        {
            s_x=-s_x;
 1c4:	80 91 66 00 	lds	r24, 0x0066
 1c8:	81 95       	neg	r24
 1ca:	80 93 66 00 	sts	0x0066, r24
            x_n=1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 64 00 	sts	0x0064, r24
        }

        if(s_y<-2)
 1d4:	80 91 67 00 	lds	r24, 0x0067
 1d8:	8e 3f       	cpi	r24, 0xFE	; 254
 1da:	54 f4       	brge	.+20     	; 0x1f0 <main+0x1a8>
        {
            s_y=-s_y;
 1dc:	80 91 67 00 	lds	r24, 0x0067
 1e0:	81 95       	neg	r24
 1e2:	80 93 67 00 	sts	0x0067, r24
            x_n|=(1<<PIN1);
 1e6:	80 91 64 00 	lds	r24, 0x0064
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	80 93 64 00 	sts	0x0064, r24
        }
        //scroll
        if(s_z>2)
 1f0:	80 91 65 00 	lds	r24, 0x0065
 1f4:	83 30       	cpi	r24, 0x03	; 3
 1f6:	4c f0       	brlt	.+18     	; 0x20a <main+0x1c2>
        {
            z_z=0x05;
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	80 93 63 00 	sts	0x0063, r24
            x_n|=(1<<PIN4);
 1fe:	80 91 64 00 	lds	r24, 0x0064
 202:	80 61       	ori	r24, 0x10	; 16
 204:	80 93 64 00 	sts	0x0064, r24
 208:	0a c0       	rjmp	.+20     	; 0x21e <main+0x1d6>
        }
        else if(s_z<-2)
 20a:	80 91 65 00 	lds	r24, 0x0065
 20e:	8e 3f       	cpi	r24, 0xFE	; 254
 210:	24 f4       	brge	.+8      	; 0x21a <main+0x1d2>
        {
            z_z=0x05;
 212:	85 e0       	ldi	r24, 0x05	; 5
 214:	80 93 63 00 	sts	0x0063, r24
 218:	02 c0       	rjmp	.+4      	; 0x21e <main+0x1d6>
        }
        else
        {
            z_z=0;
 21a:	10 92 63 00 	sts	0x0063, r1
        }
        //end scroll

        //make reference on button press.
        if((PIND&0x80)==0)
 21e:	80 e3       	ldi	r24, 0x30	; 48
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	fc 01       	movw	r30, r24
 224:	80 81       	ld	r24, Z
 226:	88 23       	and	r24, r24
 228:	5c f0       	brlt	.+22     	; 0x240 <main+0x1f8>
        {
            cli();
 22a:	f8 94       	cli
            r_x=x;
 22c:	80 91 60 00 	lds	r24, 0x0060
 230:	89 83       	std	Y+1, r24	; 0x01
            r_y=y;
 232:	80 91 61 00 	lds	r24, 0x0061
 236:	8a 83       	std	Y+2, r24	; 0x02
            r_z=z;
 238:	80 91 62 00 	lds	r24, 0x0062
 23c:	8b 83       	std	Y+3, r24	; 0x03
            sei();
 23e:	78 94       	sei
        }

        //take switch states
        if((PIND&0x08)==0)         //sw1
 240:	80 e3       	ldi	r24, 0x30	; 48
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	fc 01       	movw	r30, r24
 246:	80 81       	ld	r24, Z
 248:	88 2f       	mov	r24, r24
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	88 70       	andi	r24, 0x08	; 8
 24e:	90 70       	andi	r25, 0x00	; 0
 250:	00 97       	sbiw	r24, 0x00	; 0
 252:	29 f4       	brne	.+10     	; 0x25e <main+0x216>
        {
            x_n|=(1<<PIN3);
 254:	80 91 64 00 	lds	r24, 0x0064
 258:	88 60       	ori	r24, 0x08	; 8
 25a:	80 93 64 00 	sts	0x0064, r24

        }

        if((PIND&0x04)==0)           //sw2
 25e:	80 e3       	ldi	r24, 0x30	; 48
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	fc 01       	movw	r30, r24
 264:	80 81       	ld	r24, Z
 266:	88 2f       	mov	r24, r24
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	84 70       	andi	r24, 0x04	; 4
 26c:	90 70       	andi	r25, 0x00	; 0
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	29 f4       	brne	.+10     	; 0x27c <main+0x234>
        {
            x_n|=(1<<PIN2);
 272:	80 91 64 00 	lds	r24, 0x0064
 276:	84 60       	ori	r24, 0x04	; 4
 278:	80 93 64 00 	sts	0x0064, r24
        }

        //packet data in terms of 2 MSB bits for 4 combinations. when subtracting reference with present values assumed that MSB are clear.
       s_x=s_x&0x3f;
 27c:	80 91 66 00 	lds	r24, 0x0066
 280:	8f 73       	andi	r24, 0x3F	; 63
 282:	80 93 66 00 	sts	0x0066, r24
       s_y=s_y&0x3f;
 286:	80 91 67 00 	lds	r24, 0x0067
 28a:	8f 73       	andi	r24, 0x3F	; 63
 28c:	80 93 67 00 	sts	0x0067, r24
        x_n=x_n&0x3f;
 290:	80 91 64 00 	lds	r24, 0x0064
 294:	8f 73       	andi	r24, 0x3F	; 63
 296:	80 93 64 00 	sts	0x0064, r24
       z_z=z_z&0x3f;
 29a:	80 91 63 00 	lds	r24, 0x0063
 29e:	8f 73       	andi	r24, 0x3F	; 63
 2a0:	80 93 63 00 	sts	0x0063, r24
        s_x|=(1<<PIN7);
 2a4:	80 91 66 00 	lds	r24, 0x0066
 2a8:	80 68       	ori	r24, 0x80	; 128
 2aa:	80 93 66 00 	sts	0x0066, r24
        x_n|=(1<<PIN6);
 2ae:	80 91 64 00 	lds	r24, 0x0064
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	80 93 64 00 	sts	0x0064, r24
        z_z|=(1<<PIN7)|(1<<PIN6);
 2b8:	80 91 63 00 	lds	r24, 0x0063
 2bc:	80 6c       	ori	r24, 0xC0	; 192
 2be:	80 93 63 00 	sts	0x0063, r24



        send_ser(s_x);
 2c2:	80 91 66 00 	lds	r24, 0x0066
 2c6:	6f d0       	rcall	.+222    	; 0x3a6 <send_ser>
        send_ser(s_y);
 2c8:	80 91 67 00 	lds	r24, 0x0067
 2cc:	6c d0       	rcall	.+216    	; 0x3a6 <send_ser>
        send_ser(x_n);
 2ce:	80 91 64 00 	lds	r24, 0x0064
 2d2:	69 d0       	rcall	.+210    	; 0x3a6 <send_ser>
        send_ser(z_z);
 2d4:	80 91 63 00 	lds	r24, 0x0063
 2d8:	66 d0       	rcall	.+204    	; 0x3a6 <send_ser>
        x_n=s_x=s_y=0;
 2da:	10 92 67 00 	sts	0x0067, r1
 2de:	80 91 67 00 	lds	r24, 0x0067
 2e2:	80 93 66 00 	sts	0x0066, r24
 2e6:	80 91 66 00 	lds	r24, 0x0066
 2ea:	80 93 64 00 	sts	0x0064, r24


    }
 2ee:	4e cf       	rjmp	.-356    	; 0x18c <main+0x144>

000002f0 <__vector_14>:


    return 0;
}
ISR(ADC_vect)
{
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	ef 93       	push	r30
 304:	ff 93       	push	r31
 306:	df 93       	push	r29
 308:	cf 93       	push	r28
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62

    switch(ADMUX)
 30e:	87 e2       	ldi	r24, 0x27	; 39
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	fc 01       	movw	r30, r24
 314:	80 81       	ld	r24, Z
 316:	88 2f       	mov	r24, r24
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	81 36       	cpi	r24, 0x61	; 97
 31c:	91 05       	cpc	r25, r1
 31e:	69 f0       	breq	.+26     	; 0x33a <__vector_14+0x4a>
 320:	82 36       	cpi	r24, 0x62	; 98
 322:	91 05       	cpc	r25, r1
 324:	89 f0       	breq	.+34     	; 0x348 <__vector_14+0x58>
 326:	80 36       	cpi	r24, 0x60	; 96
 328:	91 05       	cpc	r25, r1
 32a:	a9 f4       	brne	.+42     	; 0x356 <__vector_14+0x66>
    {
        case 0x60:x=ADCH;
 32c:	85 e2       	ldi	r24, 0x25	; 37
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	fc 01       	movw	r30, r24
 332:	80 81       	ld	r24, Z
 334:	80 93 60 00 	sts	0x0060, r24
        break;
 338:	0e c0       	rjmp	.+28     	; 0x356 <__vector_14+0x66>
        case 0x61:y=ADCH;
 33a:	85 e2       	ldi	r24, 0x25	; 37
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	fc 01       	movw	r30, r24
 340:	80 81       	ld	r24, Z
 342:	80 93 61 00 	sts	0x0061, r24
        break;
 346:	07 c0       	rjmp	.+14     	; 0x356 <__vector_14+0x66>
        case 0x62:z=ADCH;
 348:	85 e2       	ldi	r24, 0x25	; 37
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	fc 01       	movw	r30, r24
 34e:	80 81       	ld	r24, Z
 350:	80 93 62 00 	sts	0x0062, r24
        break;
 354:	00 00       	nop
    }
    ADMUX++;
 356:	87 e2       	ldi	r24, 0x27	; 39
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	fc 01       	movw	r30, r24
 35c:	20 81       	ld	r18, Z
 35e:	2f 5f       	subi	r18, 0xFF	; 255
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
    if(ADMUX>0x62)
 364:	87 e2       	ldi	r24, 0x27	; 39
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	fc 01       	movw	r30, r24
 36a:	80 81       	ld	r24, Z
 36c:	83 36       	cpi	r24, 0x63	; 99
 36e:	28 f0       	brcs	.+10     	; 0x37a <__vector_14+0x8a>
    {
        ADMUX=0x60;
 370:	87 e2       	ldi	r24, 0x27	; 39
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	20 e6       	ldi	r18, 0x60	; 96
 376:	fc 01       	movw	r30, r24
 378:	20 83       	st	Z, r18
    }
    ADCSRA|=(1<<ADSC);
 37a:	86 e2       	ldi	r24, 0x26	; 38
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	26 e2       	ldi	r18, 0x26	; 38
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	f9 01       	movw	r30, r18
 384:	20 81       	ld	r18, Z
 386:	20 64       	ori	r18, 0x40	; 64
 388:	fc 01       	movw	r30, r24
 38a:	20 83       	st	Z, r18

}
 38c:	cf 91       	pop	r28
 38e:	df 91       	pop	r29
 390:	ff 91       	pop	r31
 392:	ef 91       	pop	r30
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	3f 91       	pop	r19
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

000003a6 <send_ser>:

void send_ser(char data)
{
 3a6:	df 93       	push	r29
 3a8:	cf 93       	push	r28
 3aa:	0f 92       	push	r0
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	89 83       	std	Y+1, r24	; 0x01
    while(!(UCSRA&(1<<UDRE)));
 3b2:	00 00       	nop
 3b4:	8b e2       	ldi	r24, 0x2B	; 43
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	fc 01       	movw	r30, r24
 3ba:	80 81       	ld	r24, Z
 3bc:	88 2f       	mov	r24, r24
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	80 72       	andi	r24, 0x20	; 32
 3c2:	90 70       	andi	r25, 0x00	; 0
 3c4:	00 97       	sbiw	r24, 0x00	; 0
 3c6:	b1 f3       	breq	.-20     	; 0x3b4 <send_ser+0xe>
    UDR=data;
 3c8:	8c e2       	ldi	r24, 0x2C	; 44
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	29 81       	ldd	r18, Y+1	; 0x01
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
}
 3d2:	0f 90       	pop	r0
 3d4:	cf 91       	pop	r28
 3d6:	df 91       	pop	r29
 3d8:	08 95       	ret

000003da <_exit>:
 3da:	f8 94       	cli

000003dc <__stop_program>:
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <__stop_program>
